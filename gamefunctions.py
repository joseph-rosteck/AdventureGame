"""
Module: Shop and Monster Simulation

This module contains functions for a simple shop interface and a random monster generator for a text-based game.

Functions:

1. print_welcome(name):
   Takes a player's name and prints a welcome message centered in a 20-space field.
   
   Parameters:
   - name (str): The name of the player.

2. print_shop_menu(item1name, item1price, item2name, item2price, player_gold):
   Takes two item names and their corresponding prices and prints a formatted shop menu.
   
   Parameters:
   - item1name (str): The name of the first item.
   - item1price (float): The price of the first item.
   - item2name (str): The name of the second item.
   - item2price (float): The price of the second item.
   - player_gold (int): The amount of gold the player currently has.

   Returns:
   - dict: item_purchased containing purchased item details.

3. purchase_item(itemPrice, startingMoney, quantityToPurchase=1):
   Simulates purchasing items from the shop, returning the number of items purchased 
   and the leftover money.
   
   Parameters:
   - itemPrice (float): The price of the item.
   - startingMoney (float): The amount of money available to spend.
   - quantityToPurchase (int, optional): The desired quantity of items to purchase (default is 1).
   
   Returns:
   - tuple: A tuple containing the number of items purchased and the remaining money.

4. new_random_monster():
   Generates a random monster with associated attributes including name, description, 
   health, power, and money rewards.
   
   Returns:
   - dict: A dictionary containing the monster's name, description, health, power, 
     and the amount of money it can drop.

5. display_menu(player_hp, player_gold):
   Displays a menu with some options for an encounter or to rest.

   Parameters:
   - player_hp (int): Displays current HP for the player.
   - player_gold (int): Displays current gold for the player.

   Returns:
   - str: A few menu options to prompt player input.

6. fight_monster(player_hp, player_gold, player_inventory):
   Starts a loop for fighting randomized monsters generated by new_random_monster().

   Parameters:
   - player_hp (int): Tracks current HP during encounters.
   - player_gold (int): Tracks current gold spent and gained during encounters.
   - player_inventory (dict): Tracks player's items.

   Returns:
   - tuple: Updated player HP and gold after the fight.

7. display_consumables(player_inventory):
   Displays the player's consumable items and allows the user to select one for use.

   Parameters:
   - player_inventory (dict): Dictionary of items with details (description, item type).

   Returns:
   - str or None: The name of the selected consumable, or None if no consumables are available.

   Notes:
       - Displays a message if no consumables are found in inventory.
       - Validates user input for item selection.

8. display_inventory(player_inventory, player_gold):
   Displays the player's inventory and allows interaction to equip items.

   Parameters:
   - player_inventory (dict): Dictionary of items with details (description, item type, equipped status).
   - player_gold (int): Amount of gold the player has.

   Returns:
   - None: Prints the inventory and allows user interaction.

   Notes:
       - Toggles equipped status of items.
       - Displays a message for non-equipable items.
       - Handles empty inventory cases.

Usage:
- The module is designed for a simple shop and monster encounter simulation in a text-based game.
- It includes example usage that demonstrates the functionality of the provided functions.

Example:
    print_welcome('Alice')
    print_shop_menu('Sword', 19.99, 'Shield', 12.50, player_gold)
    purchases, remaining = purchase_item(5.00, 20.00, 5)
    monster = new_random_monster()
"""



def print_welcome(name):
    '''Takes name and outputs Hello, "name"! centered in a 20 space field.

    Parameters:
   - name (str): The name of the player.'''
    
    message = f'Hello, {name}!'
    return (f'\'{message: ^20}\'')

####################################

def print_shop_menu(item1name, item1price, item2name, item2price, player_gold):
    '''Takes two items and two prices and puts them into a nice little shop menu.

    Parameters:
   - item1name (str): The name of the first item.
   - item1price (float): The price of the first item.
   - item2name (str): The name of the second item.
   - item2price (float): The price of the second item.
   - player_gold (int): The amount of gold the player currently has.'''

    
    top_border = '/' + ('-' * 40) + '\\' 
    bottom_border = '\\' + ('-' * 40) + '/'
    #creates the top and bottom border variables
    
    item1dollar = f'${item1price:.2f}'
    item2dollar = f'${item2price:.2f}'
    #converts the input float into a float with dollar signs and two digits after the decimal
    choice = None
    item_purchased = None
    while choice != '3':
        time.sleep(.3)
        print(
        

            f'{top_border}\n' +  # Top border on its own line
            f'| 1) {item1name: <27}{item1dollar: >8} |\n' +  # Item 1 with its price
            '|' + (' ' * 40) + '|\n'
            f'| 2) {item2name: <27}{item2dollar: >8} |\n' +  # Item 2 with its price
            f'{bottom_border}\n\n'  # Bottom border on its own line

            '3) Exit\n'
        )
        choice = input('Greetings adventurer! Care to buy anything?: ') 
        if choice == '1':
            if player_gold < 10:
                return 'Poor'
            time.sleep(.3)
            item_purchased = {
                'Sword': {
                    'description': 'Doubles player damage.',
                    'itemtype': 'Equipable',
                    'equipped': 1
                }
            }
            print('Thanks for the Purchase!')
            
            return item_purchased
        
        elif choice == '2':
            if player_gold < 100:
                return 'Poor'
            time.sleep(.3)
            item_purchased = {
                'Scroll of Instant Death': {
                    'description': ' Instantly kills your enemy.',
                    'itemtype': 'Consumable',
                    'equipped': 'N/A'
                }
            }
            return item_purchased 
        
        elif choice == '3':
            return 'bye'
        
####################################

import random
import time
import pygame

####################################

# No longer used, all relevent use is now in print_shop_menu
def purchase_item(itemPrice, player_gold, quantityToPurchase=1):
    '''Simulates purchasing items from the shop, returning the number of items purchased 
   and the leftover money.

   Parameters:
   - itemPrice (float): The price of the item.
   - startingMoney (float): The amount of money available to spend.
   - quantityToPurchase (int, optional): The desired quantity of items to purchase (default is 1).
   
   Returns:
   - tuple: A tuple containing the number of items purchased and the remaining money.'''
    
    while True: #loop so if quantityToPurchase is too high 
        if quantityToPurchase <= startingMoney // itemPrice:
            num_purchases = quantityToPurchase
            break
        else:
            quantityToPurchase = quantityToPurchase - 1
            continue
    
    leftover_money = startingMoney - (itemPrice * num_purchases)
    return num_purchases, leftover_money
    
###################################

def new_random_monster():
    '''Generates a random monster with associated attributes including name, description, 
   health, power, and money rewards.
   
   Returns:
   - dict: A dictionary containing the monster's name, description, health, power, 
     and the amount of money it can drop.'''
    

    names = ['Goblin', 'Troll', 'Dragon']
    weights = [15, 4, 1]
    
    descriptions = {
    "Goblin": "This is a lone goblin. When it notices you, it rushes at you quickly with a sharp dagger drawn.",
    "Troll": "A massive troll lumbers into your path, when it sees you it lets out a deafening roar.",
    "Dragon": "You spot the majestic dragon curled on top of its horde. When you cross the threshold of the cave, its eyes snap open.",
    }
    
    health_ranges = {
    "Goblin": (3, 10),
    "Troll": (15, 50),
    "Dragon": (100, 300),
    }
    power_ranges = {
    "Goblin": (1, 5),
    "Troll": (10, 25),
    "Dragon": (50, 100),
    }
    money_range = {
    "Goblin": (5, 10),
    "Troll": (25, 50),
    "Dragon": (100, 500),
    }

    name = random.choices(names, weights, k=1)[0]
    description = descriptions[name]
    health = random.randint(*health_ranges[name])
    power = random.randint(*power_ranges[name])
    money = random.randint(*money_range[name])
    
                  
    return {
        "name": name,
        "description": description,
        "health": health,
        "power": power,
        "money": money,
        }
        
####################################





####################################

def display_menu(player_hp, player_gold):
    """Displays the main game menu."""
    print(f"Current HP: {player_hp}, Current Gold: {player_gold}")
    print("What would you like to do?")
    print("1) Fight Monster")
    print("2) Sleep (Restore 10 HP for 5 Gold)")
    print("3) Shop")
    print("4) Inventory")
    print("5) Save Game")
    print("6) Quit")

####################################

def fight_monster(player_hp, player_gold, player_inventory):
    """
    Logic for choosing and fighting monsters.

    Parameters:
        player_hp (int): The player's current health points.
        player_gold (int): The player's current gold amount.
        player_inventory (dict): The player's inventory and items they can use.

    Returns:
        tuple: Updated player_hp and player_gold after the fight.
    """
     
     # Generate random monster stats
    monster_stats = new_random_monster()
    monster_hp = monster_stats["health"]
    monster_min_power = monster_stats["power"] // 2
    monster_max_power = monster_stats["power"]
    print(f'\nYou stumbled upon a {monster_stats["name"]}! Its power is {monster_stats["power"]}')
    
     # Loop until either the player or the monster is defeated
    while player_hp > 0 and monster_hp > 0:
        print(f'\nMonster Hp: {monster_hp}   Player Hp: {player_hp}\n')
        action = input('1) Attack!\n2) Run away.\n3) Consumables.\n4) Exit\n')
        
         # Calculate damage dealt to monster and player
        if action == '1':
            if 'Sword' in player_inventory and not player_inventory['Sword']['equipped']:
                print('You have an equipped Sword, damage is doubled')
                damage_to_monster = (random.randint(3, 10)) * 2
            else:
                damage_to_monster = random.randint(3, 10)

            
            
            damage_to_player = random.randint(monster_min_power, monster_max_power)

             # Update health points based on damage
            monster_hp -= damage_to_monster
            player_hp -= damage_to_player
            print(f"You dealt {damage_to_monster} damage to the monster.")
            print(f"The monster dealt {damage_to_player} damage to you.")
            
             # Checks for and edge case where both player and monster are defeated at the same time.
            if monster_hp <= 0 and player_hp <= 0:
                print("You have been defeated by the monster!\n")
                time.sleep(1)
                exit() 
            if monster_hp <= 0:
                print(f'\nYou defeated the monster and got {monster_stats["money"]} gold!\n')
                player_gold += monster_stats["money"]
                break
            elif player_hp <= 0:
                print("You have been defeated by the monster!\n")
                time.sleep(1)
                exit() 
        elif action == '2':
            print("You ran away!\n")
            time.sleep(1)
            break
        elif action == '3':
            item_used = display_consumables(player_inventory)
            print(item_used)
            if item_used == 'Scroll of Instant Death':
                print(f'\n You pull out the scroll and set it ablaze, you direct your focus at your enemy and see a bright flash!')
                print(f'When you regain your senses you notice a pile of dust with some shiny coins sitting infront if you.')
                print(f'\nYou defeated the monster and got {monster_stats["money"]} gold!\n')
                player_gold += monster_stats["money"]
                del player_inventory['Scroll of Instant Death']
                break
        elif action == '4':
            print("Exiting the game.\n")
            time.sleep(1)
            quit()
        else:
            print('Please choose 1, 2, or 3.')

     # Return updated health and gold after the fight
    return player_hp, player_gold



####################################
def display_consumables(player_inventory):
    """
    Displays the player's consumable items and allows the user to select one for use.

    Parameters:
        player_inventory (dict): Dictionary of items with details (description, item type).

    Returns:
        str or None: The name of the selected consumable, or None if no consumables are available.

    Notes:
        - Displays a message if no consumables are found in inventory.
        - Validates user input for item selection.
    """
    # Check if the player's inventory is empty
    if not player_inventory:
        print('You have nothing in your inventory.')
        return

    # Define border width for the inventory display
    border_width = 92
    top_border = '/' + ('-' * border_width) + '\\'
    bottom_border = '\\' + ('-' * border_width) + '/'
    consumable_items = []  # To hold consumable items for selection
    while True:
        print("\n" * 5)  
        print(f'{top_border}\n|{"Consumables Inventory:":^{border_width}}|')
        print('|' + (' ' * (border_width)) + '|')
        print(f'| {"Item Name:":<28} | {"Description:":<42} | {"Item Type:":<14} |')
        print('|' + '-' * border_width + '|')

        item_found = False 

        # Go over each item in inventory.
        for item_name, item_details in player_inventory.items():
            # Check if the item is a consumable
            if item_details.get('itemtype') == 'Consumable':
                description = item_details.get('description')
                # Print the consumable
                print(f'| {len(consumable_items) + 1}) {item_name:<25} | {description:<42} | {item_details["itemtype"]:<14} |')
                consumable_items.append(item_name)  # Store consumable item names
                item_found = True  # Set to true if consumable is found
                

        # If no consumables were found.
        if not item_found:
            print(f'| {"No consumables in inventory.":<28}|')
        print(bottom_border)

        print("Options:")
        print("1) Use items")
        print("2) Exit inventory")
        choice = input('Choose an option:\n')

        if choice == '1':
            use_index = int(choice) - 1  # Convert to zero-based index
            if 0 <= use_index < len(consumable_items):  # Check for valid index
                item_name = consumable_items[use_index]
                return item_name  # Return the selected consumable
            else:
                print("Invalid choice. Please choose a valid item number.")
            break
        if choice == '2':
            break


####################################

def display_inventory(player_inventory, player_gold):
    """
    Displays the player's inventory and allows interaction to equip items.

    Parameters:
        player_inventory (dict): Dictionary of items with details (description, item type, equipped status).
        player_gold (int): Amount of gold the player has.

    Returns:
        None: Prints the inventory and allows user interaction.

    Notes:
        - Toggles equipped status of items.
        - Displays a message for non-equipable items.
        - Handles empty inventory cases.
    """
    if not player_inventory :
        print('You have nothing in your inventory.')
        return
    

    border_width = 92
    top_border = '/' + ('-' * border_width) + '\\'
    bottom_border = '\\' + ('-' * border_width) + '/'

    choice = None


    while True:
        # Prints the inventory
        print("\n" * 5)

        print(f'{top_border}\n|{"Inventory:":^{border_width}}|')
        print('|' + (' ' * (border_width)) + '|')
        print(f'| {"Item Name:":<25} | {"Description:":<37} | {"Item Type:":<10} | {"Equipped:":<8} |')
        print('|' + '-' * (border_width) + '|')

        item_nums = 1
        for item_name, item_details in player_inventory.items():

            description = item_details['description']
            item_type = item_details['itemtype']
            if item_details['equipped'] == 'N/A':
                equipped = 'N/A'
            else:
                equipped = "No" if item_details['equipped'] else "Yes"
            print(f'| {item_nums}) {item_name:<22} | {description:<37} | {item_type:<10} | {equipped:<9} |')
            item_nums = item_nums + 1

        print(bottom_border)
        print(f'Gold: {player_gold}\n')

        # Provide options for the user to interact or exit
        print("Options:")
        print("1) Equip items")
        print("2) Exit Inventory")
        choice = input("Choose an option: ")

        if choice == '1':
            equip_choice = input('What item do you want to equip?:')
            equip_index = int(equip_choice) - 1 # 0 index
            item_name = list(player_inventory.keys())[equip_index]

            if player_inventory[item_name]['equipped'] == 'N/A':
                print('That item is not equipable.')
                break
            
            # Toggle equipped status
            player_inventory[item_name]['equipped'] = not player_inventory[item_name]['equipped']
            equipped_status = "No" if player_inventory[item_name]['equipped'] else "Yes" 
            print(f"{item_name} equipped status is now: {equipped_status}")

            continue
        elif choice == '2':
            print("Exiting inventory display.\n\n")
            break
        else:
            print("Invalid option. Please choose again.")


